import com.diffplug.spotless.LineEnding

plugins {
	id "java"
	id "idea"
	id "eclipse"
	id "jacoco"
	id "groovy"
	id "application"
	id "maven-publish"
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id "com.diffplug.spotless" version "6.18.0"
	id 'org.jetbrains.kotlin.jvm' version '1.9.21'
}

group = project.property("group")
version = project.property("version")

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

ext {
	set("snippetsDir", file("build/generated-snippets"))
}

dependencies {
	implementation 'org.projectlombok:lombok:1.18.28',
		'org.apache.commons:commons-lang3:3.14.0',
		'com.fasterxml.jackson.core:jackson-databind:2.16.0',
		'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.0',
		'org.apache.logging.log4j:log4j-core:2.22.0',
		'org.apache.logging.log4j:log4j-api:2.22.0',
		"io.github.cdimascio:java-dotenv:5.2.2"

	compileOnly 'org.projectlombok:lombok:1.18.28'

	annotationProcessor 'org.projectlombok:lombok:1.18.28'

	testImplementation platform('org.junit:junit-bom:5.9.1'),
		'org.junit.jupiter:junit-jupiter:5.10.1'
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = 'com.bookstore'
			artifactId = 'common'
			version = '0.0.1'

			from components.java
		}
	}
}

tasks.named("build") {
	finalizedBy(publishToMavenLocal)
}

test {
	outputs.dir(snippetsDir)

	useJUnitPlatform()

	testLogging {
		events "passed", "skipped", "failed"
	}

	afterSuite { desc, result ->
		if (!desc.parent) {
			println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
		}
	}

	afterTest { desc, result ->
		logger.quiet "[${desc.className.tokenize('.').last()}]: [${desc.name}]: ${result.resultType}"
	}
}

jacoco {
	toolVersion = "0.8.9"
}

jacocoTestReport {
	dependsOn test

	doFirst {
		def file = file("$buildDir.absolutePath/reports/jacoco/jacocoTestReport.xml")
		if (file.exists()) {
			file.delete()
		}
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = new BigDecimal(project.property("tests.coverage.ratio") as String)
			}
		}
	}
}

spotless {
	java {
		target "src/**/*.java",
			"src/**/*.yaml",
			"src/**/*.json",
			"src/**/*.html",
			"src/**/*.css"

		prettier(["prettier": "2.0.5", "prettier-plugin-java": "0.8.0"]).config([
			"tabWith"           : 2,
			"printWidth"        : 100,
			"singleQuote"       : true,
			"useTabs"           : true,
			"ignoreConfigFile"  : false,
			"ignoreEditorConfig": false
		])
		removeUnusedImports()
		lineEndings(LineEnding.UNIX)
		indentWithTabs(2)
		trimTrailingWhitespace()
		endWithNewline()
	}
}

idea {
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
	}
}
kotlin {
	jvmToolchain(17)
}
