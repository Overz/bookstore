volumes:
  postgres:
    name: bookstore-postgres
  pgadmin:
    name: bookstore-pgadmin
  keycloak:
    name: bookstore-keycloak
  nginx:
    name: bookstore-nginx
  minio:
    name: bookstore-minio
  mongo:
    name: bookstore-mongo
  zookeeper:
    name: bookstore-zookeeper
  kafka:
    name: bookstore-kafka

networks:
  internal:
    name: bookstore-network

services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: always
    hostname: nginx-srv
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '128Mb'
    env_file:
      - ./nginx/.env.nginx
    volumes:
      - nginx:/etc/nginx
    depends_on:
      - keycloak
      - postgres
      - adminer
      # - pgadmin
      # - minio
    ports:
      - '443:443'
    networks:
      internal:

  adminer:
    build:
      context: ./adminer
      dockerfile: Dockerfile
    restart: always
    hostname: adminer-srv
    deploy:
      resources:
        limits:
          memory: '128Mb'
          cpus: '0.05'
    env_file:
      - ./adminer/.env.adminer
    ports:
      - "9999:9999"
    networks:
      internal:

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    restart: always
    hostname: postgres-srv
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '1536Mb'
    env_file:
      - ./postgres/.env.postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      internal:

  # pgadmin:
  #   image: dpage/pgadmin4:8.1
  #   restart: always
  #   hostname: pgadmin-srv
  #   deploy:
  #     resources:
  #       limits:
  #         memory: '384Mb'
  #         cpus: '0.1'
  #   env_file:
  #     - ./pgadmin/.env.pgadmin
  #   volumes:
  #     - pgadmin:/var/lib/pgadmin
  #   networks:
  #     internal:

  keycloak:
    build:
      context: ./keycloak
      dockerfile: Dockerfile
      no_cache: true
    restart: always
    hostname: keycloak-srv
    deploy:
      resources:
        limits:
          memory: '768Mb'
          cpus: '0.5'
    healthcheck:
      test: curl --head -fsS http://localhost:9000/health/ready
      interval: 10s
      start_interval: 45s
      timeout: 5s
    depends_on:
      - postgres
    env_file:
      - ./keycloak/.env.keycloak
    volumes:
      - keycloak:/opt/keycloak
    networks:
      internal:

#  mongo:
#    image: mongo:8.0.4
#    restart: always
#    hostname: mongo-srv
#    deploy:
#      resources:
#        limits:
#          memory: '512Mb'
#          cpus: '0.5'
#    env_file:
#      - ./mongo/.env.mongo
#    volumes:
#      - mongo:/data/db
#    ports:
#      - '27017:27017'
#    networks:
#      internal:
#
#  minio:
#    build:
#      context: ./minio
#      dockerfile: Dockerfile
#    restart: always
#    hostname: minio-srv
#    deploy:
#      resources:
#        limits:
#          cpus: '0.7'
#          memory: '512Mb'
#    env_file:
#      - ./minio/.env.minio
#    volumes:
#      - minio:/minio/data
#    ports:
#      - '6000:6000'
#      - '6001:6001'
#    networks:
#      internal:
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.8.0
#    hostname: zookeeper-srv
#    restart: always
#    deploy:
#      resources:
#        limits:
#          cpus: '0.2'
#          memory: '384Mb'
#    env_file:
#      - ./kafka/.env.zookeeper
#    volumes:
#      - zookeeper:/var/lib/zookeeper
#    networks:
#      internal:
#
#  kafka:
#    image: confluentinc/cp-kafka:7.8.0
#    hostname: kafka-srv
#    restart: always
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: '512Mb'
#    depends_on:
#      zookeeper:
#        condition: service_completed_successfully
#    env_file:
#      - ./kafka/.env.kafka
#    volumes:
#      - kafka:/var/lib/zookeeper
#    ports:
#      - '9092:9092'
#    networks:
#      internal:
#
#  kafdrop:
#    image: obsidiandynamics/kafdrop:4.1.0
#    hostname: kafdrop-srv
#    restart: always
#    deploy:
#      resources:
#        limits:
#          cpus: '0.1'
#          memory: '512Mb'
#    depends_on:
#      - kafka
#    env_file:
#      - ./kafka/.env.kafdrop
#    ports:
#      - '19000:9000'
#    networks:
#      internal:

#  prometheus:
#    image: prom/prometheus:v3.1.0
#    restart: always
#    hostname: prometheus-srv
#    env_file:
#      - ./prometheus/.env.prometheus
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheus:/prometheus
#    networks:
#      internal:
#
#  grafana:
#    image: grafana/grafana:7.4.0
#    restart: always
#    hostname: grafana-srv
#    depends_on:
#      - prometheus
#    env_file:
#      - ./grafana/.env.grafana
#    volumes:
#      - grafana:/var/lib/grafana
#    networks:
#      internal:
