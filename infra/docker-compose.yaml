version: '3.9'

volumes:
  postgres:
    name: bookstore-postgres
  pgadmin:
    name: bookstore-pgadmin
  keycloak:
    name: bookstore-keycloak
  nginx:
    name: bookstore-nginx
  minio:
    name: bookstore-minio
  mongo:
    name: bookstore-mongo

networks:
  app:
    name: bookstore-network

services:
  nginx:
    image: nginx:1.25.3-alpine
    restart: always
    hostname: nginx-srv
    env_file:
      - ./nginx/.env.nginx
    volumes:
      - ./nginx/conf.d/:/etc/nginx/conf.d/
      - ./nginx/ssl/:/etc/nginx/ssl/
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - keycloak
      - postgres
      - adminer
      - pgadmin
    ports:
      - '443:443'
    networks:
      app:

  postgres:
    image: postgres:16.1
    restart: always
    hostname: postgres-srv
    build:
      context: ./postgres
      dockerfile: Dockerfile
    env_file:
      - ./postgres/.env.postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      app:

  adminer:
    image: adminer:4.8.1
    restart: always
    hostname: adminer-srv
    env_file:
      - ./adminer/.env.adminer
    volumes:
      - ./adminer/adminer.css:/var/www/html/adminer.css
    command:
      - 'php'
      - '-S'
      - '[::]:9999'
      - '-t'
      - '/var/www/html'
    ports:
      - "9999:9999"
    networks:
      app:

  pgadmin:
    image: dpage/pgadmin4:8.1
    restart: always
    hostname: pgadmin-srv
    env_file:
      - ./pgadmin/.env.pgadmin
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      app:

  keycloak:
    image: keycloak/keycloak:23.0.3
    restart: always
    hostname: keycloak-srv
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8443/health/ready"]
      interval: "30s"
      timeout: "10s"
      retries: 3
      start_period: "60s"
    depends_on:
      - postgres
    env_file:
      - ./keycloak/.env.keycloak
    volumes:
      - keycloak:/opt/keycloak
      - ./keycloak/ssl/:/etc/x509/https/
      - ./keycloak/realms.json:/opt/keycloak/data/import/realms.json
    # - ./postgres/ssl/postgres.crt:$HOME/.postgresql/root.crt
    ports:
      - "8080:8080"
      - "8443:8443"
    command:
      - start
    networks:
      app:

#  mongo:
#    image: mongo:7.0.4
#    restart: always
#    hostname: mongo-srv
#    env_file:
#      - ./mongo/.env.mongo
#    volumes:
#      - mongo:/data/db
#    ports:
#      - '27017:27017'
#    networks:
#      app:

  minio:
    image: minio/minio:RELEASE.2023-12-23T07-19-11Z
    restart: always
    hostname: minio-srv
    env_file:
      - ./minio/.env.minio
    volumes:
      - minio:/minio/data
      - ./minio/ssl/minio.key:/etc/minio/certs/private.key
      - ./minio/ssl/minio.crt:/etc/minio/certs/public.crt
    command:
      - server
      - /minio/data
      - --address
      - ":6000"
      - --console-address
      - ":6061"
    ports:
      - "6000:6000"
    networks:
      app:

#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.5.3
#    hostname: zookeeper-srv
#    env_file:
#      - ./kafka/.env.zookeeper
#    networks:
#      app:
#
#  kafka:
#    image: confluentinc/cp-kafka:7.5.3
#    hostname: kafka-srv
#    depends_on:
#      - zookeeper
#    env_file:
#      - ./kafka/.env.kafka
#    ports:
#      - "9092:9092"
#    networks:
#      app:
#
#  kafdrop:
#    image: obsidiandynamics/kafdrop:4.0.1
#    depends_on:
#      - kafka
#    env_file:
#      - ./kafka/.env.kafdrop
#    ports:
#      - "19000:9000"
#    networks:
#      app:

#  prometheus:
#    image: prom/prometheus:v2.47.0
#    restart: always
#    hostname: prometheus-srv
#    env_file:
#      - ./prometheus/.env.prometheus
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheus:/prometheus
#    networks:
#      app:
#
#  grafana:
#    image: grafana/grafana:10.2.3
#    restart: always
#    hostname: grafana-srv
#    depends_on:
#      - prometheus
#    env_file:
#      - ./grafana/.env.grafana
#    volumes:
#      - grafana:/var/lib/grafana
#    networks:
#      app:
