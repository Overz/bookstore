#!/usr/bin/env python3

from os import path
import sys
import re

SCRIPT_DIR = path.realpath(path.join(path.dirname(__file__)))
BASE_DIR = path.realpath(path.join(SCRIPT_DIR, '..', '..'))
COMMIT_EDITMSG_FILE = path.join(BASE_DIR, '.git', 'COMMIT_EDITMSG')

LINE_LIMIT = 70
END_CONTENT = "#"
HEADER_PATTERN = r'^(feat|bug|chore|doc|version\(\d+\.\d+\.\d+\)):'


def exit_with_error(msg: str):
	"""
	realiza o exist(1) com uma mensagem de erro
	"""
	print(msg)
	sys.exit(1)

# Leitura do arquivo COMMIT_EDIMSG
with open(COMMIT_EDITMSG_FILE, mode='r', encoding='UTF-8') as commit_file:
	content = commit_file.read()

	lines = content.split('\n')
	header = lines[0]

	if not re.match(HEADER_PATTERN, header):
		exit_with_error("""
			Erro: A primeira linha não segue o padrão de prefixo.
				  feat: novas funcionalidades.
				  bug: correções de bugs.
				  chore: pequenos ajustes.
				  doc: documentações.
				  version: nova versão para arvore do git.
		""")

	if len(header) > LINE_LIMIT:
		exit_with_error(f"Erro: O header excede o limite de {LINE_LIMIT} caracteres.")

	for i, line in enumerate(lines[1:], start=2):
		if not line.startswith(END_CONTENT) and len(line) > LINE_LIMIT:
			exit_with_error(f"Erro: Linha {i} excede o limite de {LINE_LIMIT} caracteres.")

	if header.startswith('version'):
		match = re.search(r'version\((\d+\.\d+\.\d+)\)', header)
		if not match:
			exit_with_error("Erro: não foi possível extrair a versão do header.")
